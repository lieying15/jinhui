package com.thlh.baselib.model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.DaoException;
import com.thlh.baselib.db.DaoSession;
import com.thlh.baselib.db.GoodsDbDao;
import org.greenrobot.greendao.annotation.NotNull;
import com.thlh.baselib.db.SeengoodDao;

@Entity
public class Seengood {
    @Id
    private Long seengood_id;

    private long goods_id;
    @ToOne(joinProperty = "goods_id")
    private GoodsDb goodsdb;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated(hash = 1055956509)
    private transient SeengoodDao myDao;
    @Generated(hash = 210465026)
    public Seengood(Long seengood_id, long goods_id) {
        this.seengood_id = seengood_id;
        this.goods_id = goods_id;
    }
    @Generated(hash = 477454618)
    public Seengood() {
    }
    public Long getSeengood_id() {
        return this.seengood_id;
    }
    public void setSeengood_id(Long seengood_id) {
        this.seengood_id = seengood_id;
    }
    public long getGoods_id() {
        return this.goods_id;
    }
    public void setGoods_id(long goods_id) {
        this.goods_id = goods_id;
    }
    @Generated(hash = 2013092804)
    private transient Long goodsdb__resolvedKey;
    /** To-one relationship, resolved on first access. */
    @Generated(hash = 536556193)
    public GoodsDb getGoodsdb() {
        long __key = this.goods_id;
        if (goodsdb__resolvedKey == null || !goodsdb__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsDbDao targetDao = daoSession.getGoodsDbDao();
            GoodsDb goodsdbNew = targetDao.load(__key);
            synchronized (this) {
                goodsdb = goodsdbNew;
                goodsdb__resolvedKey = __key;
            }
        }
        return goodsdb;
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 227385795)
    public void setGoodsdb(@NotNull GoodsDb goodsdb) {
        if (goodsdb == null) {
            throw new DaoException(
                    "To-one property 'goods_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.goodsdb = goodsdb;
            goods_id = goodsdb.getDbid();
            goodsdb__resolvedKey = goods_id;
        }
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }
    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }
    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1304008053)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSeengoodDao() : null;
    }



}
