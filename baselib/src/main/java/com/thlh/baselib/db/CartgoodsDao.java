package com.thlh.baselib.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thlh.baselib.model.GoodsDb;

import com.thlh.baselib.model.Cartgoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARTGOODS".
*/
public class CartgoodsDao extends AbstractDao<Cartgoods, Long> {

    public static final String TABLENAME = "CARTGOODS";

    /**
     * Properties of entity Cartgoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cartgoods_id = new Property(0, Long.class, "cartgoods_id", true, "_id");
        public final static Property Goods_num = new Property(1, int.class, "goods_num", false, "GOODS_NUM");
        public final static Property IsSelect = new Property(2, Boolean.class, "isSelect", false, "IS_SELECT");
        public final static Property IsPayMjb = new Property(3, Boolean.class, "isPayMjb", false, "IS_PAY_MJB");
        public final static Property IsBuyImmediately = new Property(4, Boolean.class, "isBuyImmediately", false, "IS_BUY_IMMEDIATELY");
        public final static Property Bunding_info = new Property(5, String.class, "bunding_info", false, "BUNDING_INFO");
        public final static Property Suppliername = new Property(6, String.class, "suppliername", false, "SUPPLIERNAME");
        public final static Property Supplierid = new Property(7, String.class, "supplierid", false, "SUPPLIERID");
        public final static Property Db_goods_id = new Property(8, Long.class, "db_goods_id", false, "DB_GOODS_ID");
    }

    private DaoSession daoSession;


    public CartgoodsDao(DaoConfig config) {
        super(config);
    }
    
    public CartgoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARTGOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: cartgoods_id
                "\"GOODS_NUM\" INTEGER NOT NULL ," + // 1: goods_num
                "\"IS_SELECT\" INTEGER," + // 2: isSelect
                "\"IS_PAY_MJB\" INTEGER," + // 3: isPayMjb
                "\"IS_BUY_IMMEDIATELY\" INTEGER," + // 4: isBuyImmediately
                "\"BUNDING_INFO\" TEXT," + // 5: bunding_info
                "\"SUPPLIERNAME\" TEXT," + // 6: suppliername
                "\"SUPPLIERID\" TEXT," + // 7: supplierid
                "\"DB_GOODS_ID\" INTEGER);"); // 8: db_goods_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARTGOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cartgoods entity) {
        stmt.clearBindings();
 
        Long cartgoods_id = entity.getCartgoods_id();
        if (cartgoods_id != null) {
            stmt.bindLong(1, cartgoods_id);
        }
        stmt.bindLong(2, entity.getGoods_num());
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(3, isSelect ? 1L: 0L);
        }
 
        Boolean isPayMjb = entity.getIsPayMjb();
        if (isPayMjb != null) {
            stmt.bindLong(4, isPayMjb ? 1L: 0L);
        }
 
        Boolean isBuyImmediately = entity.getIsBuyImmediately();
        if (isBuyImmediately != null) {
            stmt.bindLong(5, isBuyImmediately ? 1L: 0L);
        }
 
        String bunding_info = entity.getBunding_info();
        if (bunding_info != null) {
            stmt.bindString(6, bunding_info);
        }
 
        String suppliername = entity.getSuppliername();
        if (suppliername != null) {
            stmt.bindString(7, suppliername);
        }
 
        String supplierid = entity.getSupplierid();
        if (supplierid != null) {
            stmt.bindString(8, supplierid);
        }
 
        Long db_goods_id = entity.getDb_goods_id();
        if (db_goods_id != null) {
            stmt.bindLong(9, db_goods_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cartgoods entity) {
        stmt.clearBindings();
 
        Long cartgoods_id = entity.getCartgoods_id();
        if (cartgoods_id != null) {
            stmt.bindLong(1, cartgoods_id);
        }
        stmt.bindLong(2, entity.getGoods_num());
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(3, isSelect ? 1L: 0L);
        }
 
        Boolean isPayMjb = entity.getIsPayMjb();
        if (isPayMjb != null) {
            stmt.bindLong(4, isPayMjb ? 1L: 0L);
        }
 
        Boolean isBuyImmediately = entity.getIsBuyImmediately();
        if (isBuyImmediately != null) {
            stmt.bindLong(5, isBuyImmediately ? 1L: 0L);
        }
 
        String bunding_info = entity.getBunding_info();
        if (bunding_info != null) {
            stmt.bindString(6, bunding_info);
        }
 
        String suppliername = entity.getSuppliername();
        if (suppliername != null) {
            stmt.bindString(7, suppliername);
        }
 
        String supplierid = entity.getSupplierid();
        if (supplierid != null) {
            stmt.bindString(8, supplierid);
        }
 
        Long db_goods_id = entity.getDb_goods_id();
        if (db_goods_id != null) {
            stmt.bindLong(9, db_goods_id);
        }
    }

    @Override
    protected final void attachEntity(Cartgoods entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cartgoods readEntity(Cursor cursor, int offset) {
        Cartgoods entity = new Cartgoods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cartgoods_id
            cursor.getInt(offset + 1), // goods_num
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isSelect
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isPayMjb
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isBuyImmediately
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bunding_info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // suppliername
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // supplierid
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // db_goods_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cartgoods entity, int offset) {
        entity.setCartgoods_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoods_num(cursor.getInt(offset + 1));
        entity.setIsSelect(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIsPayMjb(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsBuyImmediately(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setBunding_info(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSuppliername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSupplierid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDb_goods_id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cartgoods entity, long rowId) {
        entity.setCartgoods_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cartgoods entity) {
        if(entity != null) {
            return entity.getCartgoods_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cartgoods entity) {
        return entity.getCartgoods_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGoodsDbDao().getAllColumns());
            builder.append(" FROM CARTGOODS T");
            builder.append(" LEFT JOIN GOODS_DB T0 ON T.\"DB_GOODS_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Cartgoods loadCurrentDeep(Cursor cursor, boolean lock) {
        Cartgoods entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GoodsDb goodsdb = loadCurrentOther(daoSession.getGoodsDbDao(), cursor, offset);
        entity.setGoodsdb(goodsdb);

        return entity;    
    }

    public Cartgoods loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Cartgoods> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Cartgoods> list = new ArrayList<Cartgoods>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Cartgoods> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Cartgoods> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
