package com.thlh.baselib.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thlh.baselib.model.Supplier;

import com.thlh.baselib.model.GoodsDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_DB".
*/
public class GoodsDbDao extends AbstractDao<GoodsDb, Long> {

    public static final String TABLENAME = "GOODS_DB";

    /**
     * Properties of entity GoodsDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dbid = new Property(0, Long.class, "dbid", true, "_id");
        public final static Property Item_id = new Property(1, String.class, "item_id", false, "ITEM_ID");
        public final static Property Item_name = new Property(2, String.class, "item_name", false, "ITEM_NAME");
        public final static Property Bar_code = new Property(3, String.class, "bar_code", false, "BAR_CODE");
        public final static Property Item_price = new Property(4, String.class, "item_price", false, "ITEM_PRICE");
        public final static Property Member_price = new Property(5, String.class, "member_price", false, "MEMBER_PRICE");
        public final static Property Market_price = new Property(6, String.class, "market_price", false, "MARKET_PRICE");
        public final static Property Is_promotion = new Property(7, String.class, "is_promotion", false, "IS_PROMOTION");
        public final static Property Promotion_price = new Property(8, String.class, "promotion_price", false, "PROMOTION_PRICE");
        public final static Property Start_date = new Property(9, String.class, "start_date", false, "START_DATE");
        public final static Property End_date = new Property(10, String.class, "end_date", false, "END_DATE");
        public final static Property Item_img = new Property(11, String.class, "item_img", false, "ITEM_IMG");
        public final static Property Item_img_thumb = new Property(12, String.class, "item_img_thumb", false, "ITEM_IMG_THUMB");
        public final static Property Item_subtitle = new Property(13, String.class, "item_subtitle", false, "ITEM_SUBTITLE");
        public final static Property Is_shelves = new Property(14, String.class, "is_shelves", false, "IS_SHELVES");
        public final static Property Weight = new Property(15, String.class, "weight", false, "WEIGHT");
        public final static Property Bundling_price = new Property(16, String.class, "bundling_price", false, "BUNDLING_PRICE");
        public final static Property Is_bundling = new Property(17, String.class, "is_bundling", false, "IS_BUNDLING");
        public final static Property Supplier_id = new Property(18, String.class, "supplier_id", false, "SUPPLIER_ID");
        public final static Property Is_g = new Property(19, String.class, "is_g", false, "IS_G");
        public final static Property Is_area = new Property(20, String.class, "is_area", false, "IS_AREA");
        public final static Property Is_div_delivery = new Property(21, String.class, "is_div_delivery", false, "IS_DIV_DELIVERY");
        public final static Property Is_mjb = new Property(22, String.class, "is_mjb", false, "IS_MJB");
        public final static Property Storage = new Property(23, int.class, "storage", false, "STORAGE");
        public final static Property Special = new Property(24, String.class, "special", false, "SPECIAL");
        public final static Property Item_no = new Property(25, String.class, "item_no", false, "ITEM_NO");
        public final static Property Is_part = new Property(26, String.class, "is_part", false, "IS_PART");
        public final static Property Part_of_id = new Property(27, String.class, "part_of_id", false, "PART_OF_ID");
        public final static Property Part_is_bundling = new Property(28, String.class, "part_is_bundling", false, "PART_IS_BUNDLING");
        public final static Property Is_prepare = new Property(29, String.class, "is_prepare", false, "IS_PREPARE");
        public final static Property Is_limit = new Property(30, String.class, "is_limit", false, "IS_LIMIT");
        public final static Property Is_pack = new Property(31, String.class, "is_pack", false, "IS_PACK");
        public final static Property Pack_num = new Property(32, String.class, "pack_num", false, "PACK_NUM");
        public final static Property Limit_icon = new Property(33, String.class, "limit_icon", false, "LIMIT_ICON");
        public final static Property Limit_num = new Property(34, String.class, "limit_num", false, "LIMIT_NUM");
        public final static Property Mjb_value = new Property(35, String.class, "mjb_value", false, "MJB_VALUE");
        public final static Property Db_supplier_id = new Property(36, long.class, "db_supplier_id", false, "DB_SUPPLIER_ID");
    }

    private DaoSession daoSession;


    public GoodsDbDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbid
                "\"ITEM_ID\" TEXT," + // 1: item_id
                "\"ITEM_NAME\" TEXT," + // 2: item_name
                "\"BAR_CODE\" TEXT," + // 3: bar_code
                "\"ITEM_PRICE\" TEXT," + // 4: item_price
                "\"MEMBER_PRICE\" TEXT," + // 5: member_price
                "\"MARKET_PRICE\" TEXT," + // 6: market_price
                "\"IS_PROMOTION\" TEXT," + // 7: is_promotion
                "\"PROMOTION_PRICE\" TEXT," + // 8: promotion_price
                "\"START_DATE\" TEXT," + // 9: start_date
                "\"END_DATE\" TEXT," + // 10: end_date
                "\"ITEM_IMG\" TEXT," + // 11: item_img
                "\"ITEM_IMG_THUMB\" TEXT," + // 12: item_img_thumb
                "\"ITEM_SUBTITLE\" TEXT," + // 13: item_subtitle
                "\"IS_SHELVES\" TEXT," + // 14: is_shelves
                "\"WEIGHT\" TEXT," + // 15: weight
                "\"BUNDLING_PRICE\" TEXT," + // 16: bundling_price
                "\"IS_BUNDLING\" TEXT," + // 17: is_bundling
                "\"SUPPLIER_ID\" TEXT," + // 18: supplier_id
                "\"IS_G\" TEXT," + // 19: is_g
                "\"IS_AREA\" TEXT," + // 20: is_area
                "\"IS_DIV_DELIVERY\" TEXT," + // 21: is_div_delivery
                "\"IS_MJB\" TEXT," + // 22: is_mjb
                "\"STORAGE\" INTEGER NOT NULL ," + // 23: storage
                "\"SPECIAL\" TEXT," + // 24: special
                "\"ITEM_NO\" TEXT," + // 25: item_no
                "\"IS_PART\" TEXT," + // 26: is_part
                "\"PART_OF_ID\" TEXT," + // 27: part_of_id
                "\"PART_IS_BUNDLING\" TEXT," + // 28: part_is_bundling
                "\"IS_PREPARE\" TEXT," + // 29: is_prepare
                "\"IS_LIMIT\" TEXT," + // 30: is_limit
                "\"IS_PACK\" TEXT," + // 31: is_pack
                "\"PACK_NUM\" TEXT," + // 32: pack_num
                "\"LIMIT_ICON\" TEXT," + // 33: limit_icon
                "\"LIMIT_NUM\" TEXT," + // 34: limit_num
                "\"MJB_VALUE\" TEXT," + // 35: mjb_value
                "\"DB_SUPPLIER_ID\" INTEGER NOT NULL );"); // 36: db_supplier_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsDb entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindString(2, item_id);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(3, item_name);
        }
 
        String bar_code = entity.getBar_code();
        if (bar_code != null) {
            stmt.bindString(4, bar_code);
        }
 
        String item_price = entity.getItem_price();
        if (item_price != null) {
            stmt.bindString(5, item_price);
        }
 
        String member_price = entity.getMember_price();
        if (member_price != null) {
            stmt.bindString(6, member_price);
        }
 
        String market_price = entity.getMarket_price();
        if (market_price != null) {
            stmt.bindString(7, market_price);
        }
 
        String is_promotion = entity.getIs_promotion();
        if (is_promotion != null) {
            stmt.bindString(8, is_promotion);
        }
 
        String promotion_price = entity.getPromotion_price();
        if (promotion_price != null) {
            stmt.bindString(9, promotion_price);
        }
 
        String start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindString(10, start_date);
        }
 
        String end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindString(11, end_date);
        }
 
        String item_img = entity.getItem_img();
        if (item_img != null) {
            stmt.bindString(12, item_img);
        }
 
        String item_img_thumb = entity.getItem_img_thumb();
        if (item_img_thumb != null) {
            stmt.bindString(13, item_img_thumb);
        }
 
        String item_subtitle = entity.getItem_subtitle();
        if (item_subtitle != null) {
            stmt.bindString(14, item_subtitle);
        }
 
        String is_shelves = entity.getIs_shelves();
        if (is_shelves != null) {
            stmt.bindString(15, is_shelves);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(16, weight);
        }
 
        String bundling_price = entity.getBundling_price();
        if (bundling_price != null) {
            stmt.bindString(17, bundling_price);
        }
 
        String is_bundling = entity.getIs_bundling();
        if (is_bundling != null) {
            stmt.bindString(18, is_bundling);
        }
 
        String supplier_id = entity.getSupplier_id();
        if (supplier_id != null) {
            stmt.bindString(19, supplier_id);
        }
 
        String is_g = entity.getIs_g();
        if (is_g != null) {
            stmt.bindString(20, is_g);
        }
 
        String is_area = entity.getIs_area();
        if (is_area != null) {
            stmt.bindString(21, is_area);
        }
 
        String is_div_delivery = entity.getIs_div_delivery();
        if (is_div_delivery != null) {
            stmt.bindString(22, is_div_delivery);
        }
 
        String is_mjb = entity.getIs_mjb();
        if (is_mjb != null) {
            stmt.bindString(23, is_mjb);
        }
        stmt.bindLong(24, entity.getStorage());
 
        String special = entity.getSpecial();
        if (special != null) {
            stmt.bindString(25, special);
        }
 
        String item_no = entity.getItem_no();
        if (item_no != null) {
            stmt.bindString(26, item_no);
        }
 
        String is_part = entity.getIs_part();
        if (is_part != null) {
            stmt.bindString(27, is_part);
        }
 
        String part_of_id = entity.getPart_of_id();
        if (part_of_id != null) {
            stmt.bindString(28, part_of_id);
        }
 
        String part_is_bundling = entity.getPart_is_bundling();
        if (part_is_bundling != null) {
            stmt.bindString(29, part_is_bundling);
        }
 
        String is_prepare = entity.getIs_prepare();
        if (is_prepare != null) {
            stmt.bindString(30, is_prepare);
        }
 
        String is_limit = entity.getIs_limit();
        if (is_limit != null) {
            stmt.bindString(31, is_limit);
        }
 
        String is_pack = entity.getIs_pack();
        if (is_pack != null) {
            stmt.bindString(32, is_pack);
        }
 
        String pack_num = entity.getPack_num();
        if (pack_num != null) {
            stmt.bindString(33, pack_num);
        }
 
        String limit_icon = entity.getLimit_icon();
        if (limit_icon != null) {
            stmt.bindString(34, limit_icon);
        }
 
        String limit_num = entity.getLimit_num();
        if (limit_num != null) {
            stmt.bindString(35, limit_num);
        }
 
        String mjb_value = entity.getMjb_value();
        if (mjb_value != null) {
            stmt.bindString(36, mjb_value);
        }
        stmt.bindLong(37, entity.getDb_supplier_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsDb entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String item_id = entity.getItem_id();
        if (item_id != null) {
            stmt.bindString(2, item_id);
        }
 
        String item_name = entity.getItem_name();
        if (item_name != null) {
            stmt.bindString(3, item_name);
        }
 
        String bar_code = entity.getBar_code();
        if (bar_code != null) {
            stmt.bindString(4, bar_code);
        }
 
        String item_price = entity.getItem_price();
        if (item_price != null) {
            stmt.bindString(5, item_price);
        }
 
        String member_price = entity.getMember_price();
        if (member_price != null) {
            stmt.bindString(6, member_price);
        }
 
        String market_price = entity.getMarket_price();
        if (market_price != null) {
            stmt.bindString(7, market_price);
        }
 
        String is_promotion = entity.getIs_promotion();
        if (is_promotion != null) {
            stmt.bindString(8, is_promotion);
        }
 
        String promotion_price = entity.getPromotion_price();
        if (promotion_price != null) {
            stmt.bindString(9, promotion_price);
        }
 
        String start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindString(10, start_date);
        }
 
        String end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindString(11, end_date);
        }
 
        String item_img = entity.getItem_img();
        if (item_img != null) {
            stmt.bindString(12, item_img);
        }
 
        String item_img_thumb = entity.getItem_img_thumb();
        if (item_img_thumb != null) {
            stmt.bindString(13, item_img_thumb);
        }
 
        String item_subtitle = entity.getItem_subtitle();
        if (item_subtitle != null) {
            stmt.bindString(14, item_subtitle);
        }
 
        String is_shelves = entity.getIs_shelves();
        if (is_shelves != null) {
            stmt.bindString(15, is_shelves);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(16, weight);
        }
 
        String bundling_price = entity.getBundling_price();
        if (bundling_price != null) {
            stmt.bindString(17, bundling_price);
        }
 
        String is_bundling = entity.getIs_bundling();
        if (is_bundling != null) {
            stmt.bindString(18, is_bundling);
        }
 
        String supplier_id = entity.getSupplier_id();
        if (supplier_id != null) {
            stmt.bindString(19, supplier_id);
        }
 
        String is_g = entity.getIs_g();
        if (is_g != null) {
            stmt.bindString(20, is_g);
        }
 
        String is_area = entity.getIs_area();
        if (is_area != null) {
            stmt.bindString(21, is_area);
        }
 
        String is_div_delivery = entity.getIs_div_delivery();
        if (is_div_delivery != null) {
            stmt.bindString(22, is_div_delivery);
        }
 
        String is_mjb = entity.getIs_mjb();
        if (is_mjb != null) {
            stmt.bindString(23, is_mjb);
        }
        stmt.bindLong(24, entity.getStorage());
 
        String special = entity.getSpecial();
        if (special != null) {
            stmt.bindString(25, special);
        }
 
        String item_no = entity.getItem_no();
        if (item_no != null) {
            stmt.bindString(26, item_no);
        }
 
        String is_part = entity.getIs_part();
        if (is_part != null) {
            stmt.bindString(27, is_part);
        }
 
        String part_of_id = entity.getPart_of_id();
        if (part_of_id != null) {
            stmt.bindString(28, part_of_id);
        }
 
        String part_is_bundling = entity.getPart_is_bundling();
        if (part_is_bundling != null) {
            stmt.bindString(29, part_is_bundling);
        }
 
        String is_prepare = entity.getIs_prepare();
        if (is_prepare != null) {
            stmt.bindString(30, is_prepare);
        }
 
        String is_limit = entity.getIs_limit();
        if (is_limit != null) {
            stmt.bindString(31, is_limit);
        }
 
        String is_pack = entity.getIs_pack();
        if (is_pack != null) {
            stmt.bindString(32, is_pack);
        }
 
        String pack_num = entity.getPack_num();
        if (pack_num != null) {
            stmt.bindString(33, pack_num);
        }
 
        String limit_icon = entity.getLimit_icon();
        if (limit_icon != null) {
            stmt.bindString(34, limit_icon);
        }
 
        String limit_num = entity.getLimit_num();
        if (limit_num != null) {
            stmt.bindString(35, limit_num);
        }
 
        String mjb_value = entity.getMjb_value();
        if (mjb_value != null) {
            stmt.bindString(36, mjb_value);
        }
        stmt.bindLong(37, entity.getDb_supplier_id());
    }

    @Override
    protected final void attachEntity(GoodsDb entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsDb readEntity(Cursor cursor, int offset) {
        GoodsDb entity = new GoodsDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // item_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bar_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // item_price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // member_price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // market_price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // is_promotion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // promotion_price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // start_date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // end_date
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // item_img
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // item_img_thumb
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // item_subtitle
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // is_shelves
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // weight
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bundling_price
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // is_bundling
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // supplier_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // is_g
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // is_area
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // is_div_delivery
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // is_mjb
            cursor.getInt(offset + 23), // storage
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // special
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // item_no
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // is_part
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // part_of_id
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // part_is_bundling
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // is_prepare
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // is_limit
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // is_pack
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // pack_num
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // limit_icon
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // limit_num
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // mjb_value
            cursor.getLong(offset + 36) // db_supplier_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsDb entity, int offset) {
        entity.setDbid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItem_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBar_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItem_price(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMember_price(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMarket_price(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_promotion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPromotion_price(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStart_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEnd_date(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setItem_img(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setItem_img_thumb(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setItem_subtitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_shelves(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWeight(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBundling_price(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIs_bundling(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSupplier_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIs_g(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIs_area(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIs_div_delivery(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIs_mjb(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStorage(cursor.getInt(offset + 23));
        entity.setSpecial(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setItem_no(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIs_part(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPart_of_id(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPart_is_bundling(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIs_prepare(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIs_limit(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIs_pack(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setPack_num(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setLimit_icon(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setLimit_num(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setMjb_value(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setDb_supplier_id(cursor.getLong(offset + 36));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsDb entity, long rowId) {
        entity.setDbid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsDb entity) {
        if(entity != null) {
            return entity.getDbid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsDb entity) {
        return entity.getDbid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSupplierDao().getAllColumns());
            builder.append(" FROM GOODS_DB T");
            builder.append(" LEFT JOIN SUPPLIER T0 ON T.\"DB_SUPPLIER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GoodsDb loadCurrentDeep(Cursor cursor, boolean lock) {
        GoodsDb entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Supplier supplier = loadCurrentOther(daoSession.getSupplierDao(), cursor, offset);
         if(supplier != null) {
            entity.setSupplier(supplier);
        }

        return entity;    
    }

    public GoodsDb loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GoodsDb> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GoodsDb> list = new ArrayList<GoodsDb>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GoodsDb> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GoodsDb> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
