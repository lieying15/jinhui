package com.thlh.baselib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thlh.baselib.model.LogsOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGS_ORDER".
*/
public class LogsOrderDao extends AbstractDao<LogsOrder, Long> {

    public static final String TABLENAME = "LOGS_ORDER";

    /**
     * Properties of entity LogsOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dbid = new Property(0, Long.class, "dbid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Order_id = new Property(2, String.class, "order_id", false, "ORDER_ID");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Inputtime = new Property(4, String.class, "inputtime", false, "INPUTTIME");
        public final static Property IsRead = new Property(5, boolean.class, "isRead", false, "IS_READ");
    }


    public LogsOrderDao(DaoConfig config) {
        super(config);
    }
    
    public LogsOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGS_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbid
                "\"ID\" TEXT," + // 1: id
                "\"ORDER_ID\" TEXT," + // 2: order_id
                "\"MESSAGE\" TEXT," + // 3: message
                "\"INPUTTIME\" TEXT," + // 4: inputtime
                "\"IS_READ\" INTEGER NOT NULL );"); // 5: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGS_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogsOrder entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(3, order_id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        String inputtime = entity.getInputtime();
        if (inputtime != null) {
            stmt.bindString(5, inputtime);
        }
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogsOrder entity) {
        stmt.clearBindings();
 
        Long dbid = entity.getDbid();
        if (dbid != null) {
            stmt.bindLong(1, dbid);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(3, order_id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        String inputtime = entity.getInputtime();
        if (inputtime != null) {
            stmt.bindString(5, inputtime);
        }
        stmt.bindLong(6, entity.getIsRead() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LogsOrder readEntity(Cursor cursor, int offset) {
        LogsOrder entity = new LogsOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // order_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // inputtime
            cursor.getShort(offset + 5) != 0 // isRead
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogsOrder entity, int offset) {
        entity.setDbid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInputtime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsRead(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LogsOrder entity, long rowId) {
        entity.setDbid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LogsOrder entity) {
        if(entity != null) {
            return entity.getDbid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogsOrder entity) {
        return entity.getDbid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
